## This file is part of the book                 ##
##                                               ##
##   Abstract Algebra: Theory and Applications   ##
##                                               ##
## Copyright (C) 2015-2015  Robert A. Beezer     ##
## See the file COPYING for copying conditions.  ##

#######################
# DO NOT EDIT THIS FILE
#######################

#   1) Do make a copy of Makefile.paths.original
#      as Makefile.paths
#   2) Edit Makefile.paths as directed there
#   3) This file (Makefile) and Makefile.paths.original
#      are managed by revision control and edits will conflict
#   4) See updated history in Makefile.paths.original
#      for changes, or follow the revision control history

##############
# Introduction
##############

# This is not a "true" makefile, since it does not
# operate on dependencies.  It is more of a shell
# script, sharing common configurations

# The manufacture of the solutions manual is somewhat
# complicated due to the public nature of the problem
# statements, but the private nature of the solutions

# This is mostly offered as an example of one approach
# to managing a project with multiple output formats. and
# is not claimed to be "best practice"

######################
# System Prerequisites
######################

#   install         (system tool to make directories)
#   xsltproc        (xml/xsl text processor)
#   <helpers>       (PDF viewer, web browser, Sage executable, etc)

#####
# Use
#####

#	A) Set default directory to be the location of this file
#	B) At command line:  make solutions  (and employ targets)



# The included file contains customized versions
# of locations of the principal components of this
# project and names of various helper executables
include Makefile.paths

# These paths are subdirectories of
# the Mathbook XML distribution
# MBUSR is where extension files get copied
# so relative paths work properly
MBXSL = $(MB)/xsl
MBSCRIPT = $(MB)/script
MBUSR = $(MB)/user

# These are source and custom XSL subdirectories
# for the two AATA repositories
SRC = $(AATA)/src
XSL = $(AATA)/xsl
EXR = $(AATASOLNS)/src
SOLNXSL = $(AATASOLNS)/xsl

# These paths are subdirectories of
# a scratch directory
HTMLOUT    = $(SCRATCH)/html
PDFOUT     = $(SCRATCH)/pdf
DOCTEST    = $(SCRATCH)/doctest
EPUBOUT    = $(SCRATCH)/epub
SAGENBOUT  = $(SCRATCH)/sagenb


# Following regularly presumes  xml:id="aata" on
# the <book> element, so xsltproc creates  aata.tex

###############
# Preliminaries
###############

# Diagrams
#   invoke mbx script to manufacture diagrams
#   tikz as SVG for HTML
#   sageplot as PDF for LaTeX, SVG for HTML
#   these outputs are in source repo now, and
#   are typically just copied out
#   this should be run if diagram source changes
diagrams:
	install -d $(HTMLOUT)/images
	$(MBSCRIPT)/mbx -v -c tikz     -f svg -d $(HTMLOUT)/images $(SRC)/aata.xml
	$(MBSCRIPT)/mbx -v -c sageplot -f pdf -d $(HTMLOUT)/images $(SRC)/aata.xml
	$(MBSCRIPT)/mbx -v -c sageplot -f svg -d $(HTMLOUT)/images $(SRC)/aata.xml

# Update exercises
#   Extract problems, with statements and hints only,
#   from private solutions project to main AATA repository
#   Will require a subsequent commit in the AATA repo if
#   there have been edits to statements or hints
update-exercises:
	# XSL file writes into exercises subdirectory,
	# so do not change to that subdirectory
	cd $(SRC); \
	xsltproc --xinclude  $(SOLNXSL)/statements-only.xsl  $(EXR)/aata-solutions.xml


##########
# Products
##########

# HTML version
#   Copies in image files from source directory
#   Move to server: generated *.html and
#   entire directories - /images and /knowl
html:
	install -d $(HTMLOUT) $(MBUSR)
	cp -a $(SRC)/images $(HTMLOUT)
	cp $(XSL)/aata-common.xsl $(XSL)/aata-html.xsl $(MBUSR)
	cd $(HTMLOUT); \
	xsltproc --xinclude $(MBUSR)/aata-html.xsl $(SRC)/aata.xml

viewhtml:
	$(HTMLVIEWER) $(HTMLOUT)/aata.html &

# Electronic PDF version
#   copies in all image files, which is overkill (SVG's)
#   produces  aata.tex  in scratch directory
#   which becomes PDF, along with index entries
#   Electronic - live URL's, shaded Sage boxes, etc
pdf:
	# delete old  xsltproc  output
	# dash prevents error if not found
	-rm $(PDFOUT)/aata.tex
	install -d $(PDFOUT) $(MBUSR)
	cp -a $(SRC)/images $(PDFOUT)
	cp $(XSL)/aata-common.xsl $(XSL)/aata-latex.xsl $(XSL)/aata-pdf.xsl $(MBUSR)
	cd $(PDFOUT); \
	xsltproc --xinclude $(MBUSR)/aata-pdf.xsl $(SRC)/aata.xml; \
	$(ENGINE) aata.tex; makeindex aata; $(ENGINE) aata.tex

# View PDF from correct directory
viewpdf:
	$(PDFVIEWER) $(PDFOUT)/aata.pdf &

# Print PDF version
#   A print version for print-on-demand
#   This will also be the Annual Edition
#   Black on white, no live URLs, etc
print:
	# delete old  xsltproc  output
	# dash prevents error if not found
	-rm $(PDFOUT)/aata.tex
	install -d $(PDFOUT) $(MBUSR)
	cp -a $(SRC)/images $(PDFOUT)
	cp $(XSL)/aata-common.xsl $(XSL)/aata-latex.xsl $(XSL)/aata-print.xsl $(MBUSR)
	cd $(PDFOUT); \
	xsltproc --xinclude $(MBUSR)/aata-print.xsl $(SRC)/aata.xml; \
	$(ENGINE) aata.tex; makeindex aata; $(ENGINE) aata.tex \
	mv aata.pdf aata-print.pdf

# View PDF from correct directory
viewprint:
	$(PDFVIEWER) $(PDFOUT)/aata-print.pdf &

# Solution manual
#   setup directories, clean out old *.tex
#   copy XSL files to user directory
#   copy in main source files
#   copy full exercise/solution files into scratch directory
#   these will land on top of exercise files with just problem statements
solutions:
	install -d $(PDFOUT) $(MBUSR) $(PDFOUT)/exercises
	# delete old  xsltproc  output
	# dash prevents error if not found
	-rm $(PDFOUT)/aata-solution-manual.tex
	cp $(XSL)/aata-common.xsl $(SOLNXSL)/aata-solution-manual.xsl $(MBUSR)
	cp -a $(SRC)/* $(PDFOUT)
	cp -a $(EXR)/*.xml $(PDFOUT)/exercises
	mv $(PDFOUT)/exercises/*-sage-exercises.xml $(PDFOUT)/sage
	mv $(PDFOUT)/exercises/aata-solution-manual.xml $(PDFOUT)
	cd  $(PDFOUT); \
	xsltproc --xinclude $(MBUSR)/aata-solution-manual.xsl $(PDFOUT)/aata-solution-manual.xml; \
	$(ENGINE) aata-solution-manual.tex; $(ENGINE) aata-solution-manual.tex

viewsolutions:
	$(PDFVIEWER) $(PDFOUT)/aata-solution-manual.pdf &

# Author's Draft
#   Like electronic PDF version, but for:
#   No index created, since showidx is used
#   Various markup for author's use, todo's etc
draft:
	# delete old  xsltproc  output
	# dash prevents error if not found
	-rm $(PDFOUT)/aata.tex
	install -d $(PDFOUT) $(MBUSR)
	cp -a $(SRC)/images $(PDFOUT)
	cp $(XSL)/aata-common.xsl $(XSL)/aata-latex.xsl $(XSL)/aata-pdf.xsl $(MBUSR)
	cd $(PDFOUT); \
	xsltproc --xinclude --stringparam author-tools 'yes' \
	--stringparam latex.draft 'yes' $(MBUSR)/aata-pdf.xsl $(SRC)/aata.xml; \
	$(ENGINE) aata.tex; makeindex aata; $(ENGINE) aata.tex; \
	mv aata.pdf aata-draft.pdf

viewdraft:
	$(PDFVIEWER) $(PDFOUT)/aata-draft.pdf &


######
# Sage
######

# AATA has extensive support for Sage
# These targets are all related to that

# Doctest
#   All Sage exercises across entire source
#   Prepare location, remove *.py from previous runs
#   XSL dumps into current directory, Sage processes whole directory
#   chunk level 2 gives sections (commentaries, exercises)
doctest:
	-rm $(DOCTEST)/*.py; \
	install -d $(DOCTEST)
	cd $(DOCTEST); \
	xsltproc --xinclude --stringparam chunk-level 2 $(MBXSL)/mathbook-sage-doctest.xsl $(SRC)/aata.xml; \
	$(SAGE) -tp 0 .

# Doctest Sage Solutions
#   All Sage code in solutions
#   Remove *.py from previous runs
#   chunk level 2 gives sections (commentaries, exercises/solutions)
doctest-exercises:
	install -d $(PDFOUT)
	cp -a $(SRC)/* $(PDFOUT)
	install -d $(PDFOUT)/exercises
	cp -a $(EXR)/*.xml $(PDFOUT)/exercises
	mv $(PDFOUT)/exercises/*-sage-exercises.xml $(PDFOUT)/sage
	mv $(PDFOUT)/exercises/aata-solution-manual.xml $(PDFOUT)
	-rm $(DOCTEST)/*.py; \
	install -d $(DOCTEST)
	cd $(DOCTEST); \
	xsltproc --xinclude  --stringparam chunk-level 2 $(MBXSL)/mathbook-sage-doctest.xsl $(PDFOUT)/aata-solution-manual.xml; \
	$(SAGE) -tp 0 .


##############
# Experimental
##############

# These are in-progress and/or totally broken

# Sage Notebooks
#   Need to  make diagrams first (not a true makefile)
#   First, all content
#   Copy all the pieces into place relatice to $SCRATCH
#   Drop result in $SAGENBOUT
sagenb:
	install -d $(HTMLOUT)
	cp -a $(SRC)/*.xml $(SRC)/images $(SRC)/exercises $(SRC)/sage $(SCRATCH)
	cp -a $(HTMLOUT)/images $(SCRATCH)
	$(MBSCRIPT)/mbx -v -c all -f sagenb -o $(SAGENBOUT)/aata.zip $(SCRATCH)/aata.xml

# EPUB 3.0 assembly
#	TODO: fix retrieval of CSS (via wget?)
epub:
	rm -rf $(EPUBOUT)
	install -d $(EPUBOUT) $(EPUBOUT)/EPUB/css $(EPUBOUT)/EPUB/xhtml
	cd $(EPUBOUT); \
	xsltproc --xinclude  $(MBXSL)/mathbook-epub.xsl $(SRC)/aata.xml
	rm -rf $(EPUBOUT)/knowl
	cp ~/mathbook/local/epub-trial/mathbook-content.css $(EPUBOUT)/EPUB/css/
	cp -a $(SRC)/images $(EPUBOUT)/EPUB/xhtml
	cp -a $(EPUBOUT)/EPUB/xhtml/images/cover_aata_2014.png $(EPUBOUT)/EPUB/xhtml/images/cover.png
	#
	cp -a /media/rob/disk/mathjax-out/*.html $(EPUBOUT)/EPUB/xhtml
	#
	cd $(EPUBOUT); \
	zip -0Xq  aata-mathml.epub mimetype; zip -Xr9Dq aata-mathml.epub *