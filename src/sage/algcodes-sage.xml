<?xml version="1.0" encoding="UTF-8" ?>

<!-- This file is part of the book                 -->
<!--                                               -->
<!--   Abstract Algebra: Theory and Applications   -->
<!--                                               -->
<!-- Copyright (C) 2010-2014  Robert A. Beezer     -->
<!-- See the file COPYING for copying conditions.  -->

<section xml:id="algcodes-sage">
	<title>Sage</title>
	
	<introduction>
		<p>Sage has a full suite of linear codes and a variety of methods that may be used to investigate them.</p>
	</introduction>

	<subsection>
		<title>Constructing Linear Codes</title>

		<p>The <c>codes</c> object can be used to get a concise listing of the available implemented codes.  Type <c>codes.</c> and press the <c>Tab</c> key and most interfaces to Sage will give you a list.  You can then use a question mark at the end of a method name to learn about the various parameters.</p>

		<sage doctest="not tested">
			<input>codes.</input>
		</sage>

		<p>We will use the classic binary Hamming <m>(7,4)</m> code as an illustration.  <q>Binary</q> means we have vectors with just 0's and 1's, the <m>7</m> is the length and means the vectors have <m>7</m> coordinates, and the <m>4</m> is the dimension, meaning this code has <m>2^4=16</m> vectors comprising the code.   The documentation assumes we know a few things from later in the course.  We use <c>GF(2)</c> to specify that our code is binary <mdash /> this will make more sense at the end of the course.  A second parameter is <c>r</c> and we can see from the formulas in the documenation that setting <c>r=3</c> will give length <m>7</m>.</p>

		<sage>
			<input>H = codes.HammingCode(GF(2), 3); H</input>
			<output>[7, 4] Hamming Code over GF(2)</output>
		</sage>
	</subsection>

	<subsection>
		<title>Properties of Linear Codes</title>

		<p>We can examine the Hamming code we just built.  First the dimension.</p>

		<sage>
			<input>H.dimension()</input>
			<output>4</output>
		</sage>

		<p>The code is small enough that we can list all the codewords.</p>

		<sage>
			<input>H.list()</input>
			<output>
			[(0, 0, 0, 0, 0, 0, 0), (1, 0, 0, 0, 0, 1, 1), (0, 1, 0, 0, 1, 0, 1),
			 (1, 1, 0, 0, 1, 1, 0), (0, 0, 1, 0, 1, 1, 0), (1, 0, 1, 0, 1, 0, 1),
			 (0, 1, 1, 0, 0, 1, 1), (1, 1, 1, 0, 0, 0, 0), (0, 0, 0, 1, 1, 1, 1),
			 (1, 0, 0, 1, 1, 0, 0), (0, 1, 0, 1, 0, 1, 0), (1, 1, 0, 1, 0, 0, 1),
			 (0, 0, 1, 1, 0, 0, 1), (1, 0, 1, 1, 0, 1, 0), (0, 1, 1, 1, 1, 0, 0),
			 (1, 1, 1, 1, 1, 1, 1)]
			</output>
		</sage>

		<p>The minimum distance is perhaps one of the most important properties.  Hamming codes always have minimum distance <m>d=3</m>, so they are always single error-correcting.</p>

		<sage>
			<input>H.minimum_distance()</input>
			<output>3</output>
		</sage>

		<p>We know that the parity-check matrix and the generator matrix are useful for the construction, description and analysis of linear codes.  The Sage method names are just a bit cryptic.  Sage has extensive routines for analyzing matrices with elements from different fields, so we perform much of the subsequent analysis of these matrices within Sage.</p>

		<sage>
			<input>C = H.parity_check_matrix(); C</input>
			<output>
			[1 0 1 0 1 0 1]
			[0 1 1 0 0 1 1]
			[0 0 0 1 1 1 1]
			</output>
		</sage>

		<p>The generator matrix here in the text has <em>columns</em> that are codewords, and linear combinations of the columns (the column space of the matrix) are codewords.  In Sage the generator matrix has <em>rows</em> that are codewords and the row space of the matrix is the code.  So here is another place where we need to mentally translate between a choice made in the text and a choice made by the Sage developers.</p>

		<sage>
			<input>G = H.generator_matrix(); G</input>
			<output>
			[1 0 0 0 0 1 1]
			[0 1 0 0 1 0 1]
			[0 0 1 0 1 1 0]
			[0 0 0 1 1 1 1]
			</output>
		</sage>

		<p>Here is a partial test that these two matrices are correct, exercising Lemma<nbsp /><xref ref="lemma-parity-check" />.  Notice that we need to use the transpose of the generator matrix, for reasons described above.</p>

		<sage>
			<input>C*G.transpose() == zero_matrix(3, 4)</input>
			<output>True</output>
		</sage>

		<p>Note that the parity-check may not be canonical and the generator matrix may not be standard.  Sage can produce a generator matrix that has a set of columns that forms an identity matrix, though no guarantee is made that these columns are the first columns.  (Columns, not rows.)  Such a matrix is said to be <term>systematic</term>, and the Sage method is <c>.systematic_generator_matrix()</c>.</p>

		<sage>
			<input>H.systematic_generator_matrix()</input>
			<output>
			[1 0 0 0 0 1 1]
			[0 1 0 0 1 0 1]
			[0 0 1 0 1 1 0]
			[0 0 0 1 1 1 1]
			</output>
		</sage>

	</subsection>

	<subsection>
		<title>Decoding with a Linear Code</title>

		<p>We can decode received messages originating from a linear code.  Suppose we receive the length <m>7</m> binary vector <c>r</c>.</p>

		<sage>
			<input>r = vector(GF(2), [1, 1, 1, 1, 0, 0, 1]); r</input>
			<output>(1, 1, 1, 1, 0, 0, 1)</output>
		</sage>

		<p>We can recognize that one or more errors has occured, since <c>r</c> is not in the code, as the next computation does not yield the zero vector.</p>

		<sage>
			<input>C*r</input>
			<output>(1, 1, 0)</output>
		</sage>

		<p>A linear code has a <c>.decode</c> method.  You may choose from several different algorithms, while the Hamming codes have their own custom algorithm.  The default algorithm is syndrome decoding.</p>

		<sage>
			<input>H.decode_to_code(r)</input>
			<output>(1, 1, 0, 1, 0, 0, 1)</output>
		</sage>

		<p>So if we are willing to assume that only one error occured (which we might, if the probability of an indivual entry of the vector being in error is very low), then we see that an error occured in the third position.</p>

		<p>Remember that it could happen that there was more than just one error.  For example, suppose the message was the same as before and errors occurred in the third, fifth and sixth locations.</p>

		<sage>
			<input>
			message = vector(GF(2), [1, 1, 0, 1, 0, 0, 1])
			errors = vector(GF(2), [0, 0, 1, 0, 1, 1, 0])
			received = message + errors
			received
			</input>
			<output>(1, 1, 1, 1, 1, 1, 1)</output>
		</sage>

		<p>It then appears that we have received a codeword, so we assume no errors at all, and decode incorrectly.</p>

		<sage>
			<input>H.decode_to_code(received) == message</input>
			<output>False</output>
		</sage>

		<sage>
			<input>H.decode_to_code(received) == received</input>
			<output>True</output>
		</sage>
	</subsection>

</section>