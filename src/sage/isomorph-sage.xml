<?xml version="1.0" encoding="UTF-8" ?>

<!-- This file is part of the book                 -->
<!--                                               -->
<!--   Abstract Algebra: Theory and Applications   -->
<!--                                               -->
<!-- Copyright (C) 2010-2014  Robert A. Beezer     -->
<!-- See the file COPYING for copying conditions.  -->

<section>
	<title>Sage</title>

	<introduction>
		<p>Sage has limited support for actually creating isomorphisms, though it is possible.  However, there is excellent support for determining if two permutation groups are isomorphic.  This will allow us to begin a little project to locate <em>all</em> of the groups of order less than <m>16</m> in Sage's permutation groups.</p>
	</introduction>


<subsection>
	<title>Isomorphism Testing</title>

	<p>If <c>G</c> and <c>H</c> are two permutation groups, then the command <c>G.is_isomorphic(H)</c> will return <c>True</c> or <c>False</c> as the two groups are, or are not, isomorphic.  Since <q>isomorpic to</q> is an equivalence relation by Theorem<nbsp /><xref ref="theorem-isomorph-5" />, it does not matter which group plays the role of <c>G</c> and which plays the role of <c>H</c>.</p>

	<p>So we have a few more examples to work with, let us introduce the Sage command that creates an external direct product.  If <c>G</c> and <c>H</c> are two permutation groups, then the command <c>direct_product_permgroups([G,H])</c> will  return the external direct product as a new permutation group.  Notice that this is a function (not a method) and the input is a list.  Rather than just combining two groups in the list, any number of groups can be supplied.  We illustrate isomorphism testing and direct products in the context of Theorem<nbsp /><xref ref="theorem-z-pq" />, which is an equivalence, so tells us <em>exactly</em> when we have isomorphic groups.  We use cyclic permutation groups as stand-ins for <m>{\mathbb Z}_n</m> by Theorem<nbsp /><xref ref="theorem-isomorph-3" />.</p>

	<p>First, two isomorphic groups.</p>

	<sage>
	<input>
	m = 12
	n = 7
	gcd(m, n)
	</input>
	<output>
	1
	</output>
	</sage>

	<sage>
	<input>
	G = CyclicPermutationGroup(m)
	H = CyclicPermutationGroup(n)
	dp = direct_product_permgroups([G, H])
	K = CyclicPermutationGroup(m*n)
	K.is_isomorphic(dp)
	</input>
	<output>
	True
	</output>
	</sage>

	<p>Now, two non-isomorphic groups.</p>

	<sage>
	<input>
	m = 15
	n = 21
	gcd(m, n)
	</input>
	<output>
	3
	</output>
	</sage>

	<sage>
	<input>
	G = CyclicPermutationGroup(m)
	H = CyclicPermutationGroup(n)
	dp = direct_product_permgroups([G, H])
	K = CyclicPermutationGroup(m*n)
	K.is_isomorphic(dp)
	</input>
	<output>
	False
	</output>
	</sage>

	<p>Notice how the simple computation of a greatest common divisor predicts the incredibly complicated computation of determining if two groups are isomorphic.  This is a nice illustration of the power of mathematics, replacing a difficult problem (group isomorphism) by a simple one (factoring and divisibility of integers).  Let us build one more direct product of cyclic groups, but with three groups, each with orders that are pairwise relatively prime.</p>

	<p>If you try the following with larger parameters you may get an error (<c>database_gap</c>).</p>

	<sage>
	<input>
	m = 6
	n = 5
	r = 7
	G = CyclicPermutationGroup(m)
	H = CyclicPermutationGroup(n)
	L = CyclicPermutationGroup(r)
	dp = direct_product_permgroups([G, H, L])
	K = CyclicPermutationGroup(m*n*r)
	K.is_isomorphic(dp)
	</input>
	<output>
	True
	</output>
	</sage>
	</subsection>

	<subsection>
		<title>Classifying Finite Groups</title>

	<p>Once we understand isomorphic groups as being the <q>same</q>, or <q>fundamentally no different,</q> or <q>structurally identical,</q> then it is natural to ask how many <q>really different</q> finite groups there are.  Corollary<nbsp /><xref ref="theorem-isomorph-4" /> gives a partial answer: for each prime there is just one finite group, with <m>{\mathbb Z}_p</m> as a concrete manifestation.</p>

	<p>Let us embark on a quest to find all the groups of order less than <m>16</m> in Sage as permutation groups.  For prime orders <m>1,2,3,5,7,11</m> and <m>13</m> we know there is really just one group each, and we can realize them all:</p>

	<sage>
	<input>
	[CyclicPermutationGroup(p) for p in [1, 2, 3, 5, 7, 11, 13]]
	</input>
	<output>
	[Cyclic group of order 1 as a permutation group,
	 Cyclic group of order 2 as a permutation group,
	 Cyclic group of order 3 as a permutation group,
	 Cyclic group of order 5 as a permutation group,
	 Cyclic group of order 7 as a permutation group,
	 Cyclic group of order 11 as a permutation group,
	 Cyclic group of order 13 as a permutation group]
	</output>
	</sage>

	<p>So now our smallest unknown case is order <m>4</m>.  Sage knows at least three such groups, and we can use Sage to check if any pair is isomorphic.  Notice that since <q>isomorphic to</q> is an equivalence relation, and hence a transitive relation, the two tests below are sufficient.</p>

	<sage>
	<input>
	G = CyclicPermutationGroup(4)
	H = KleinFourGroup()
	T1 = CyclicPermutationGroup(2)
	T2 = CyclicPermutationGroup(2)
	K = direct_product_permgroups([T1, T2])
	G.is_isomorphic(H)
	</input>
	<output>
	False
	</output>
	</sage>

	<sage>
	<input>
	H.is_isomorphic(K)
	</input>
	<output>
	True
	</output>
	</sage>

	<p>So we have at least two different groups: <m>{\mathbb Z}_4</m> and <m>{\mathbb Z}_2\times{\mathbb Z}_2</m>, with the latter also known as the Klein 4-group.  Sage will not be able to tell us if we have a <em>complete</em> list <mdash /> this will always require theoretical results like Theorem<nbsp /><xref ref="theorem-isomorph-5" />.  We will shortly have a more general result that handles the case of order <m>4</m>, but right now, a careful analysis (by hand) of the possibilities for the Cayley table of a group of order <m>4</m> should lead you to the two possibilities above as the only possibilities.  Try to deduce what the Cayley table of an order <m>4</m> group should look like, since you know about identity elements, inverses and cancellation.</p>

	<p>We have seen at least two groups of order <m>6</m> (next on our list of non-prime orders).  One is abelian and one is not, so we do not need Sage to tell us they are structurally different.  But let us do it anyway.</p>

	<sage>
	<input>
	G = CyclicPermutationGroup(6)
	H = SymmetricGroup(3)
	G.is_isomorphic(H)
	</input>
	<output>
	False
	</output>
	</sage>

	<p>Is that all?  There is <m>{\mathbb Z}_3\times{\mathbb Z}_2</m>, but that is just <m>{\mathbb Z}_6</m> since <m>2</m> and <m>3</m> are relatively prime.  The dihedral group, <m>D_3</m>, all symmetries of a triangle, is just <m>S_3</m>, the symmetric group on <m>3</m> symbols.</p>

	<sage>
	<input>
	G = DihedralGroup(3)
	H = SymmetricGroup(3)
	G.is_isomorphic(H)
	</input>
	<output>
	True
	</output>
	</sage>

	<p>Exercise<nbsp /><xref ref="exercise-classify-2p" /> from this section classifies all groups of order <m>2p</m>, where <m>p</m> is a prime.  Such a group is either cyclic or a dihedral group.  So the two groups above, <m>{\mathbb Z}_6</m> and <m>D_3</m>, are the complete list of groups of order <m>6</m>.</p>

	<p>By this general result, in addition to order <m>6</m>, we also know the complete lists of groups of orders <m>10</m> and <m>14</m>.  To Be Continued.</p>

</subsection>

<subsection>
	<title>Internal Direct Products</title>

	<p>An internal direct product is a statement about subgroups of a single group, together with a theorem that links them to an external direct product.  We will work an example here that will illustrate the nature of an internal direct product.</p>

	<p>Given an integer <m>n</m>, the set of positive integers less than <m>n</m>, and relatively prime to <m>n</m> forms a group under multiplication mod <m>n</m>.  We will work in the set <c>Integers(n)</c> where we can add <em>and</em> multiply, but we want to stay strictly with multiplication only.</p>

	<p>First we build the subgroup itself.  Notice how we must convert <c>x</c> into an integer (an element of <c>ZZ</c>) so that the greatest common divisor computation performs correctly.</p>

	<sage>
	<input>
	Z36 = Integers(36)
	U = [x for x in Z36 if gcd(ZZ(x), 36) == 1]
	U
	</input>
	<output>
	[1, 5, 7, 11, 13, 17, 19, 23, 25, 29, 31, 35]
	</output>
	</sage>

	<p>So we have a group of order <m>12</m>.  We are going to try to find a subgroup of order <m>6</m> and a subgroup of order <m>2</m> to form the internal direct product, and we will restrict our search initially to cyclic subgroups of order <m>6</m>.  Sage has a method that will give the order of each of these elements, relative to multiplication, so let us examine those next.</p>

	<sage>
	<input>
	[x.multiplicative_order() for x in U]
	</input>
	<output>
	[1, 6, 6, 6, 3, 2, 2, 6, 3, 6, 6, 2]
	</output>
	</sage>

	<p>We have many choices for generators of a cyclic subgroup of order <m>6</m> and for a cyclic subgroup of order <m>2</m>.  Of course, some of the choices for a generator of the subgroup of order <m>6</m> will generate the same subgroup.  Can you tell, just by counting, how many subgroups of order <m>6</m> there are?  We are going to pick the first element of order <m>6</m>, and the last element of order <m>2</m>, for no particular reason.  After your work through this once, we encourage you to try other choices to understand why some choices lead to an internal direct product and some do not.  Notice that we choose the elements from the list <c>U</c> so that they are sure to be elements of <c>Z36</c> and behave properly when multiplied.</p>

	<sage>
	<input>
	a = U[1]
	A = [a^i for i in srange(6)]
	A
	</input>
	<output>
	[1, 5, 25, 17, 13, 29]
	</output>
	</sage>

	<sage>
	<input>
	b = U[11]
	B = [b^i for i in srange(2)]
	B
	</input>
	<output>
	[1, 35]
	</output>
	</sage>

	<p>So <c>A</c> and <c>B</c> are two cyclic subgroups.  Notice that their intersection is the identity element, one of our requirements for an internal direct product.  So this is a good start.</p>

	<sage>
	<input>[x for x in A if x in B]</input>
	<output>[1]</output>
	</sage>

	<p><c>Z36</c> is an abelian group, thus the condition on all products commuting will hold, but we illustrate the Sage commands that will check this in a non-abelian situation.</p>

	<sage>
	<input>
	all([x*y == y*x for x in A for y in B])
	</input>
	<output>
	True
	</output>
	</sage>

	<p>Finally, we need to check that by forming products with elements from <c>A</c> and <c>B</c> we create the entire group.  Sorting the resulting list will make a check easier for us visually, and is required if we want Sage to do the check.</p>

	<sage>
	<input>
	T = sorted([x*y for x in A for y in B])
	T
	</input>
	<output>
	[1, 5, 7, 11, 13, 17, 19, 23, 25, 29, 31, 35]
	</output>
	</sage>

	<sage>
	<input>
	T == U
	</input>
	<output>
	True
	</output>
	</sage>

	<p>That's it.  We now condense all this information into the statement that <q><c>U</c> is the internal direct product of <c>A</c> and <c>B</c>.</q>  By Theorem<nbsp /><xref ref="theorem-isomorph-directproducts" />, we see that <c>U</c> is isomorphic to a product of a cyclic group of order <m>6</m> and a cyclic group of order <m>2</m>.  So in a very real sense, <c>U</c> is no more or less complicated than <m>{\mathbb Z}_6\times{\mathbb Z}_2</m>, which is in turn isomorphic to  <m>{\mathbb Z}_3\times{\mathbb Z}_2\times{\mathbb Z}_2</m>.  So we totally understand the <q>structure</q> of <c>U</c>.  For example, we can see that <c>U</c> is not cyclic, since when written as a product of cyclic groups, the two orders are not relatively prime.  The final expression of <c>U</c> suggests you could find three cyclic subgroups of <c>U</c>, with orders <m>3</m>, <m>2</m> and <m>2</m>, so that <c>U</c> is an internal direct product of the three subgroups.</p>

	</subsection>
</section>







