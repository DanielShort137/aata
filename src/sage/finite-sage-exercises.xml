<?xml version="1.0"?>
<!-- This file is part of the book                 -->
<!--                                               -->
<!--   Abstract Algebra: Theory and Applications   -->
<!--                                               -->
<!-- Copyright (C) 2010-2014  Robert A. Beezer     -->
<!-- See the file COPYING for copying conditions.  -->
<!--                                               -->
<!-- This file is automatically generated from the -->
<!-- private solution manual.  Minor contributed   -->
<!-- edits can be made against this file for       -->
<!-- the purpose of a pull request.                -->
<exercises xml:id="finite-sage-exercises">
    <title>Sage Exercises</title>

    <exercise number="1">
        <statement>
            <p>Create a finite field of order <m>5^2</m> and then factor <m>p(x)=x^{25}-x</m> over this field.  Comment on what is interesting about this result and why it is not a surprise.</p>
        </statement>

        
    </exercise>

    <exercise number="2">
        <statement>
            <p>Corollary<nbsp/><xref ref="corollary-cyclic-group-finite-field"/> says that the nonzero elements of a finite field are a cyclic group under multiplication.  The generator used in Sage is also a generator of this multiplicative group.  To see this, create a finite field of order <m>2^7</m>.  Create two lists of the elements of the field: first, use the <c>.list()</c> method, then use a list comprehension to generate the proper powers of the generator you specified when you created the field.</p>

            <p>The second list should be the whole field, but will be missing zero.  Create the zero element of the field (perhaps by coercing <m>0</m> into the field) and <c>.append()</c> it to the list of powers.  Apply the <c>sorted()</c> command to each list and then test the lists for equality.</p>
        </statement>

        
    </exercise>

    <exercise number="3">
        <statement>
            <p>Subfields of a finite field are completely classified by Theorem<nbsp/><xref ref="theorem-finite-subfields"/>.  It is possible to create two finite fields of the correct orders for the supefield/subfield realtionship to hold, and to translate between one and the other.  However, in this exercise we will create a subfield of a finite field from scratch.  Since the group of nonzero elements in a finite field is cyclic, the nonzero elements of a subfield will form a subgroup of the cyclic group, and necessarily will be cyclic.</p>

            <p>Create a finite field of order <m>3^6</m>.  Theory says there is a subfield of order <m>3^2</m>, since <m>2|6</m>.  Determine a generator of multiplicative order <m>8</m> for the nonzero elements of this subfield, and construct these <m>8</m> elements.  Add in the field's zero element to this list.  It should be clear that this set of <m>9</m> elements is closed under multiplication.  Absent our theorems about finite fields and cyclic groups, the closure under addition is not a given.  Write a single statement that checks if this set is also closed under addition, by considering all possible sums of elements from the set.</p>
        </statement>

        
    </exercise>

    <exercise number="4">
        <statement>
            <p>This problem investigates the <q>separableness</q> of <m>{\mathbb Q}(\sqrt{3},\sqrt{7})</m>.  You can create this number field quickly with the <c>NumberFieldTower</c> constructor, along with the polynomials <m>x^2-3</m> and <m>x^2-7</m>.  Flatten the tower with the <c>.absolute_field()</c> method and use the <c>.structure()</c> method to retrieve mappings between the tower and the flattened version.  Name the tower <c>N</c> and use <c>a</c> and <c>b</c> as generators.  Name the flattened version <c>L</c> with <c>c</c> as a generator.</p>

            <p>Create a nontrivial (<q>random</q>) element of <c>L</c> using as many powers of <c>c</c> as possible (check the degree of <c>L</c> to see how many linearly independent powers there are).  Request from Sage the minimum polynomial of your random element, thus ensuring the element is a root.  Construct the minimum polynomial as a polynomial over <c>N</c>, the field tower, and find its factorization.  Your factorization should have only linear factors.  Each root should be an expression in <c>a</c> and <c>b</c>, so convert each root into an expression with mathematical notation involving <m>\sqrt{3}</m> and <m>\sqrt{7}</m>.  Use one of the mappings to verify that one of the roots is indeed the original random element.</p>

            <p>Create a few more random elements, and find a factorization (in <c>N</c> or in <c>L</c>).  For a field to be separable, every element of the field should be a root of <em>some</em> separable polynomial.  The minimal polynomial is a good polynomial to test.  (Why?)  Based on the evidence, does it appear that <m>{\mathbb Q}(\sqrt{3},\sqrt{7})</m> is a separable extension?</p>
        </statement>

        
    </exercise>

    <exercise number="5">
        <statement>
            <p>Exercise<nbsp/><xref ref="exercise-frobenius-map"/> describes the Frobenius Map, an automorphism of a finite field.  If <c>F</c> is a finite field in Sage, then <c>End(F)</c> will create the automorphism group of F, the set of all bijective mappings between the field and itself.</p>

            <ol>
                <li><p>Work Exercise<nbsp/><xref ref="exercise-frobenius-map"/> to gain an understanding of how and why the Frobenius mapping is a field automorphism.  (Do not include any of this in your answer to this question, but understand that the following will be much easier if you do this problem first.)</p></li>

                <li><p>For some small, but not trivial, finite fields locate the Frobenius map in the automorphism group.  Small might mean <m>p=2,3,5,7</m> and <m>3\leq n\leq 10</m>, with <m>n</m> prime versus composite.</p></li>

                <li><p>Once you have located the Frobenius map, describe the other automorphisms.  In other words, with a bit of investigation, you should find a description of the automorphisms which will allow you to accurately predict the entire automorphism group for a finite field you have not already explored.  (Hint: the automorphism group is a group.  What if you <q>do the operation</q> between the Frobenius map and itself?  Just what is the operation?  Try using Sage's multiplicative notation with the elements of the automorphism group.)</p></li>

                <li><p>What is the <q>structure</q> of the automorphism group?  What special status does the Frobenius map have in this group?</p></li>

                <li><p>For any field, the subfield known as the fixed field is an important construction, and will be especially important in the next chapter.  Given an automorphism <m>\tau</m> of a field <m>E</m>, the subset, <m>K=\{b\in E\mid\tau(b)=b\}</m>, can be shown to be a subfield of <m>E</m>.  It is known as the <term>fixed field</term> of <m>\tau</m> in <m>E</m>.  For each automorphism of <m>E=GF(3^6)</m> identify the fixed field of the automorphism.  Since we understand the structure of subfields of a finite field, it is enough to just determine the order of the fixed field to be able to identify the subfield precisely.</p></li>
            </ol>

        </statement>

        
    </exercise>

    <exercise number="6">
        <statement>
            <p>Exercise<nbsp/><xref ref="exercise-finite-sum-of-squares"/> suggests that every element of a finite field may be written (expressed) as a sum of squares.  This exercise suggests computational experiments which might help you formulate a proof for the exercise.</p>

            <ol>
                <li><p>Construct two small, but not too small, finite fields, one with <m>p=2</m> and the other with an odd prime.  Repeat the following for each field, <m>F</m>.</p></li>

                <li><p>Choose a <q>random</q> element of the field, say <m>a\in F</m>.  Construct the sets <md>
                    <mrow>&amp;\{x^2|x\in F\}&amp;&amp;\{a-x^2|x\in F\}</mrow>
                </md> using Sage sets with the <m>Set()</m> constructor.  (Be careful: <c>set()</c> is a Python command which behaves differently in fundamental ways.)</p></li>

                <li><p>Examine the size of the two sets and the size of their intersection (<c>.intersection()</c>).  Try different elements for <m>a</m>, perhaps writing a loop to try <em>all</em> possible values. Note that <m>p=2</m> will behave quite differently.</p></li>

                <li><p>Suppose you have an element of the intersection.  (You can get one with <c>.an_element()</c>.)  How does this lead to the sum of squares proposed in the exercise?</p></li>

                <li><p>Can you write a Python function that accepts a finite field whose order is a power of an odd prime and then lists each element as a sum of squares?</p></li>
            </ol>

        </statement>

        
    </exercise>

</exercises>
