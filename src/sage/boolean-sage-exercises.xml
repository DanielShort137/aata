<?xml version="1.0"?>
<!-- This file is part of the book                 -->
<!--                                               -->
<!--   Abstract Algebra: Theory and Applications   -->
<!--                                               -->
<!-- Copyright (C) 2010-2014  Robert A. Beezer     -->
<!-- See the file COPYING for copying conditions.  -->
<!--                                               -->
<!-- This file is automatically generated from the -->
<!-- private solution manual.  Minor contributed   -->
<!-- edits can be made against this file for       -->
<!-- the purpose of a pull request.                -->
<exercises xml:id="boolean-sage-exercises">
    <title>Sage Exercises</title>

    <exercise number="1">
        <statement>
            <p>Use  <c>R = Posets.RandomPoset(30,0.05)</c> to construct a random poset.  Use <c>R.plot()</c> to get an idea of what you have built.</p>

            <ol>
                <li><p>Illustrate the use of the poset methods:
                <c>.is_lequal()</c>,
                <c>.is_less_than()</c>,
                <c>.is_gequal()</c>, and
                <c>.is_greater_than()</c>
                to determine if two specific elements (of your choice) are related or incomparable.</p></li>

                <li><p>Use <c>.minimal_elements()</c> and <c>.maximal_elements()</c> to find the smallest and largest elements of your poset.</p></li>

                <li><p>Use <c>LatticePoset(R)</c> to see if the poset <c>R</c> is a lattice by attempting to convert it into a lattice.</p></li>

                <li><p>Find a linear extension of your poset.  Confirm that any pair of elements that are comparable in the poset will be similarly comparable in the linear extension.</p></li>
            </ol>
        </statement>

        

    </exercise>

    <exercise number="2">
        <statement>
            <p>Construct the poset on the positive divisors of <m>72=2^3\cdot 3^2</m> with divisiblity as the relation, and then convert to a lattice.</p>

            <ol>

                <li><p>Determine the one and zero element using <c>.top()</c> and <c>.bottom()</c>.</p></li>

                <li><p>Determine all the pairs of elements of the lattice that are complements of each other <em>without</em> using the <c>.complement()</c> method, but rather just use the <c>.meet()</c> and <c>.join()</c> methods.  Extra credit if you can output each pair just once.</p></li>

                <li><p>Determine if the lattice is distributive using just the <c>.meet()</c> and <c>.join()</c> methods, and not the <c>.is_distributive()</c> method.</p></li>
            </ol>
        </statement>

        
    </exercise>

    <exercise number="3">
        <statement>
            <p>Construct several specific diamond lattices with <c>Posets.DiamondPoset(n)</c> by varying the value of <c>n</c>.  Once you feel you have enough empirical evidence, give answers, with justifications, to the following questions for <em>general</em> values of <m>n</m>, based on observations obtained from your experiments with Sage.</p>

            <ol>
                <li><p>Which elements have complements and which do not, and why?</p></li>

                <li><p>Read the documentation of the <c>.antichains()</c> method to learn what an antichain is.  How many antichains are there?</p></li>

                <li><p>Is the lattice distributive?</p></li>
            </ol>
        </statement>

        
    </exercise>

    <exercise number="4">
        <statement>
            <p>Use <c>Posets.BooleanLattice(4)</c> to construct an instance of the prototypical Boolean algebra on <m>16</m> elements (<ie/>, all subsets of a <m>4</m>-set).</p>

            <p>Then use <c>Posets.IntegerCompositions(5)</c> to construct the poset whose <m>16</m> elements are the compositions of the integer <m>5</m>.  We have seen above that the integer composition lattice is distributive and complemented, making it a Boolean algebra.  And by Theorem<nbsp/><xref ref="theorem-classification-boolean-algebra"/> we can conclude that these two Boolean algebras are isomorphic.</p>

            <p>Use the <c>.plot()</c> method to see the similarity visually.  Then use the method <c>.hasse_diagram()</c> on each poset to obtain a directed graph (which you can also plot, though the embedding into the plane may not be as informative).  Employ the graph method <c>.is_isomorphic()</c> to see that the two Hasse diagrams really are the <q>same.</q></p>
        </statement>

        
    </exercise>


    <exercise number="5">
        <statement>
            <p>(Advanced) For the previous question, construct an <em>explicit</em> isomorphism between the two Boolean algebras.  This would be a bijective function (constructed with the <c>def</c> command) that converts compositions into sets (or if, you choose, sets into compositions) and which respects the meet and join operations.  You can test and illustrate your function by its interaction with specific elements evaluated in the meet and join operations, as described in the definition of an isomorphism of Boolean algebras.</p>
        </statement>

        

    </exercise>

</exercises>
